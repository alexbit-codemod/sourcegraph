package reconciler

import (
	"bufio"
	"context"
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/davecgh/go-spew/spew"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime/schema"
	k8syamlapi "k8s.io/apimachinery/pkg/util/yaml"
)

func (suite *ApplianceTestSuite) TestAdoptBlobstore() {
	// TODO run in CI. Use the actual helm repo?
	if os.Getenv("APPLIANCE_ADOPTION_TESTS_RUN") == "" {
		suite.T().Skip("APPLIANCE_ADOPTION_TESTS_RUN is not set, skipping")
	}

	namespace := suite.createRandomNamespace()
	suite.deployResourcesToAdopt("blobstore", namespace)

	name := "adoption/blobstore"
	suite.createConfigMapInNamespaceAndAwaitReconciliation(name, namespace)
	suite.makeGoldenAssertions(namespace, name)
}

// generated by `helm template`
func (suite *ApplianceTestSuite) deployResourcesToAdopt(component, namespace string) {
	fixture, err := os.Open(filepath.Join("testdata", "adopted-resources", component+".yaml"))
	suite.Require().NoError(err)
	defer fixture.Close()
	multiDocYAMLReader := k8syamlapi.NewYAMLReader(bufio.NewReader(fixture))
	for {
		yamlDoc, err := multiDocYAMLReader.Read()
		if err == io.EOF {
			break
		}
		suite.Require().NoError(err)
		jsonDoc, err := k8syamlapi.ToJSON(yamlDoc)
		suite.Require().NoError(err)
		obj, gvk, err := unstructured.UnstructuredJSONScheme.Decode(jsonDoc, nil, nil)
		suite.Require().NoError(err)
		k8sObj := obj.(*unstructured.Unstructured)

		gvr := schema.GroupVersionResource{
			Group:    gvk.Group,
			Version:  gvk.Version,
			Resource: strings.ToLower(gvk.Kind) + "s",
		}

		spew.Dump(gvr)

		_, err = suite.dynamicK8sClient.Resource(gvr).Namespace(namespace).Create(context.Background(), k8sObj, metav1.CreateOptions{})
		suite.Require().NoError(err)
	}
}
