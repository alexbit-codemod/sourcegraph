// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/sourcegraph/sourcegraph/lib/enterpriseportal/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EnterprisePortalCoreServiceName is the fully-qualified name of the EnterprisePortalCoreService
	// service.
	EnterprisePortalCoreServiceName = "sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EnterprisePortalCoreServiceGetSubscriptionProcedure is the fully-qualified name of the
	// EnterprisePortalCoreService's GetSubscription RPC.
	EnterprisePortalCoreServiceGetSubscriptionProcedure = "/sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService/GetSubscription"
	// EnterprisePortalCoreServiceListSubscriptionsProcedure is the fully-qualified name of the
	// EnterprisePortalCoreService's ListSubscriptions RPC.
	EnterprisePortalCoreServiceListSubscriptionsProcedure = "/sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService/ListSubscriptions"
	// EnterprisePortalCoreServiceListSubscriptionLicensesProcedure is the fully-qualified name of the
	// EnterprisePortalCoreService's ListSubscriptionLicenses RPC.
	EnterprisePortalCoreServiceListSubscriptionLicensesProcedure = "/sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService/ListSubscriptionLicenses"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	enterprisePortalCoreServiceServiceDescriptor                        = v1.File_core_proto.Services().ByName("EnterprisePortalCoreService")
	enterprisePortalCoreServiceGetSubscriptionMethodDescriptor          = enterprisePortalCoreServiceServiceDescriptor.Methods().ByName("GetSubscription")
	enterprisePortalCoreServiceListSubscriptionsMethodDescriptor        = enterprisePortalCoreServiceServiceDescriptor.Methods().ByName("ListSubscriptions")
	enterprisePortalCoreServiceListSubscriptionLicensesMethodDescriptor = enterprisePortalCoreServiceServiceDescriptor.Methods().ByName("ListSubscriptionLicenses")
)

// EnterprisePortalCoreServiceClient is a client for the
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService service.
type EnterprisePortalCoreServiceClient interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	// ListSubscriptions queries for Enterprise subscriptions.
	ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// ListSubscriptionLicenses queries for Enterprise subscription licenses.
	ListSubscriptionLicenses(context.Context, *connect.Request[v1.ListSubscriptionLicensesRequest]) (*connect.Response[v1.ListSubscriptionLicensesResponse], error)
}

// NewEnterprisePortalCoreServiceClient constructs a client for the
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEnterprisePortalCoreServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EnterprisePortalCoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &enterprisePortalCoreServiceClient{
		getSubscription: connect.NewClient[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse](
			httpClient,
			baseURL+EnterprisePortalCoreServiceGetSubscriptionProcedure,
			connect.WithSchema(enterprisePortalCoreServiceGetSubscriptionMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSubscriptions: connect.NewClient[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse](
			httpClient,
			baseURL+EnterprisePortalCoreServiceListSubscriptionsProcedure,
			connect.WithSchema(enterprisePortalCoreServiceListSubscriptionsMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		listSubscriptionLicenses: connect.NewClient[v1.ListSubscriptionLicensesRequest, v1.ListSubscriptionLicensesResponse](
			httpClient,
			baseURL+EnterprisePortalCoreServiceListSubscriptionLicensesProcedure,
			connect.WithSchema(enterprisePortalCoreServiceListSubscriptionLicensesMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// enterprisePortalCoreServiceClient implements EnterprisePortalCoreServiceClient.
type enterprisePortalCoreServiceClient struct {
	getSubscription          *connect.Client[v1.GetSubscriptionRequest, v1.GetSubscriptionResponse]
	listSubscriptions        *connect.Client[v1.ListSubscriptionsRequest, v1.ListSubscriptionsResponse]
	listSubscriptionLicenses *connect.Client[v1.ListSubscriptionLicensesRequest, v1.ListSubscriptionLicensesResponse]
}

// GetSubscription calls
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.GetSubscription.
func (c *enterprisePortalCoreServiceClient) GetSubscription(ctx context.Context, req *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// ListSubscriptions calls
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.ListSubscriptions.
func (c *enterprisePortalCoreServiceClient) ListSubscriptions(ctx context.Context, req *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return c.listSubscriptions.CallUnary(ctx, req)
}

// ListSubscriptionLicenses calls
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.ListSubscriptionLicenses.
func (c *enterprisePortalCoreServiceClient) ListSubscriptionLicenses(ctx context.Context, req *connect.Request[v1.ListSubscriptionLicensesRequest]) (*connect.Response[v1.ListSubscriptionLicensesResponse], error) {
	return c.listSubscriptionLicenses.CallUnary(ctx, req)
}

// EnterprisePortalCoreServiceHandler is an implementation of the
// sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService service.
type EnterprisePortalCoreServiceHandler interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error)
	// ListSubscriptions queries for Enterprise subscriptions.
	ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error)
	// ListSubscriptionLicenses queries for Enterprise subscription licenses.
	ListSubscriptionLicenses(context.Context, *connect.Request[v1.ListSubscriptionLicensesRequest]) (*connect.Response[v1.ListSubscriptionLicensesResponse], error)
}

// NewEnterprisePortalCoreServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEnterprisePortalCoreServiceHandler(svc EnterprisePortalCoreServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	enterprisePortalCoreServiceGetSubscriptionHandler := connect.NewUnaryHandler(
		EnterprisePortalCoreServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		connect.WithSchema(enterprisePortalCoreServiceGetSubscriptionMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	enterprisePortalCoreServiceListSubscriptionsHandler := connect.NewUnaryHandler(
		EnterprisePortalCoreServiceListSubscriptionsProcedure,
		svc.ListSubscriptions,
		connect.WithSchema(enterprisePortalCoreServiceListSubscriptionsMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	enterprisePortalCoreServiceListSubscriptionLicensesHandler := connect.NewUnaryHandler(
		EnterprisePortalCoreServiceListSubscriptionLicensesProcedure,
		svc.ListSubscriptionLicenses,
		connect.WithSchema(enterprisePortalCoreServiceListSubscriptionLicensesMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EnterprisePortalCoreServiceGetSubscriptionProcedure:
			enterprisePortalCoreServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case EnterprisePortalCoreServiceListSubscriptionsProcedure:
			enterprisePortalCoreServiceListSubscriptionsHandler.ServeHTTP(w, r)
		case EnterprisePortalCoreServiceListSubscriptionLicensesProcedure:
			enterprisePortalCoreServiceListSubscriptionLicensesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEnterprisePortalCoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEnterprisePortalCoreServiceHandler struct{}

func (UnimplementedEnterprisePortalCoreServiceHandler) GetSubscription(context.Context, *connect.Request[v1.GetSubscriptionRequest]) (*connect.Response[v1.GetSubscriptionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.GetSubscription is not implemented"))
}

func (UnimplementedEnterprisePortalCoreServiceHandler) ListSubscriptions(context.Context, *connect.Request[v1.ListSubscriptionsRequest]) (*connect.Response[v1.ListSubscriptionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.ListSubscriptions is not implemented"))
}

func (UnimplementedEnterprisePortalCoreServiceHandler) ListSubscriptionLicenses(context.Context, *connect.Request[v1.ListSubscriptionLicensesRequest]) (*connect.Response[v1.ListSubscriptionLicensesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("sourcegraph.enterpriseportal.core.v1.EnterprisePortalCoreService.ListSubscriptionLicenses is not implemented"))
}
