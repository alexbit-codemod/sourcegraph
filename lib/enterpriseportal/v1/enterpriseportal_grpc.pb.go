// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: enterpriseportal.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnterprisePortalService_GetSubscription_FullMethodName          = "/enterpriseportal.v1.EnterprisePortalService/GetSubscription"
	EnterprisePortalService_ListSubscriptions_FullMethodName        = "/enterpriseportal.v1.EnterprisePortalService/ListSubscriptions"
	EnterprisePortalService_ListSubscriptionLicenses_FullMethodName = "/enterpriseportal.v1.EnterprisePortalService/ListSubscriptionLicenses"
)

// EnterprisePortalServiceClient is the client API for EnterprisePortalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterprisePortalServiceClient interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error)
	// ListSubscriptions queries for Enterprise subscriptions.
	ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error)
	// ListSubscriptionLicenses queries for Enterprise subscription licenses.
	ListSubscriptionLicenses(ctx context.Context, in *ListSubscriptionLicensesRequest, opts ...grpc.CallOption) (*ListSubscriptionLicensesResponse, error)
}

type enterprisePortalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterprisePortalServiceClient(cc grpc.ClientConnInterface) EnterprisePortalServiceClient {
	return &enterprisePortalServiceClient{cc}
}

func (c *enterprisePortalServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*GetSubscriptionResponse, error) {
	out := new(GetSubscriptionResponse)
	err := c.cc.Invoke(ctx, EnterprisePortalService_GetSubscription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterprisePortalServiceClient) ListSubscriptions(ctx context.Context, in *ListSubscriptionsRequest, opts ...grpc.CallOption) (*ListSubscriptionsResponse, error) {
	out := new(ListSubscriptionsResponse)
	err := c.cc.Invoke(ctx, EnterprisePortalService_ListSubscriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enterprisePortalServiceClient) ListSubscriptionLicenses(ctx context.Context, in *ListSubscriptionLicensesRequest, opts ...grpc.CallOption) (*ListSubscriptionLicensesResponse, error) {
	out := new(ListSubscriptionLicensesResponse)
	err := c.cc.Invoke(ctx, EnterprisePortalService_ListSubscriptionLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterprisePortalServiceServer is the server API for EnterprisePortalService service.
// All implementations must embed UnimplementedEnterprisePortalServiceServer
// for forward compatibility
type EnterprisePortalServiceServer interface {
	// GetSubscription retrieves an exact match on an Enterprise subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// ListSubscriptions queries for Enterprise subscriptions.
	ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error)
	// ListSubscriptionLicenses queries for Enterprise subscription licenses.
	ListSubscriptionLicenses(context.Context, *ListSubscriptionLicensesRequest) (*ListSubscriptionLicensesResponse, error)
	mustEmbedUnimplementedEnterprisePortalServiceServer()
}

// UnimplementedEnterprisePortalServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterprisePortalServiceServer struct {
}

func (UnimplementedEnterprisePortalServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedEnterprisePortalServiceServer) ListSubscriptions(context.Context, *ListSubscriptionsRequest) (*ListSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptions not implemented")
}
func (UnimplementedEnterprisePortalServiceServer) ListSubscriptionLicenses(context.Context, *ListSubscriptionLicensesRequest) (*ListSubscriptionLicensesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubscriptionLicenses not implemented")
}
func (UnimplementedEnterprisePortalServiceServer) mustEmbedUnimplementedEnterprisePortalServiceServer() {
}

// UnsafeEnterprisePortalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterprisePortalServiceServer will
// result in compilation errors.
type UnsafeEnterprisePortalServiceServer interface {
	mustEmbedUnimplementedEnterprisePortalServiceServer()
}

func RegisterEnterprisePortalServiceServer(s grpc.ServiceRegistrar, srv EnterprisePortalServiceServer) {
	s.RegisterService(&EnterprisePortalService_ServiceDesc, srv)
}

func _EnterprisePortalService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterprisePortalService_ListSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalServiceServer).ListSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalService_ListSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalServiceServer).ListSubscriptions(ctx, req.(*ListSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnterprisePortalService_ListSubscriptionLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubscriptionLicensesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalServiceServer).ListSubscriptionLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalService_ListSubscriptionLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalServiceServer).ListSubscriptionLicenses(ctx, req.(*ListSubscriptionLicensesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterprisePortalService_ServiceDesc is the grpc.ServiceDesc for EnterprisePortalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterprisePortalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterpriseportal.v1.EnterprisePortalService",
	HandlerType: (*EnterprisePortalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscription",
			Handler:    _EnterprisePortalService_GetSubscription_Handler,
		},
		{
			MethodName: "ListSubscriptions",
			Handler:    _EnterprisePortalService_ListSubscriptions_Handler,
		},
		{
			MethodName: "ListSubscriptionLicenses",
			Handler:    _EnterprisePortalService_ListSubscriptionLicenses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "enterpriseportal.proto",
}
