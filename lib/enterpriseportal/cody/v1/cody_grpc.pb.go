// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: cody.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EnterprisePortalCodyService_GetCodyGatewayAccess_FullMethodName = "/sourcegraph.enterpriseportal.cody.v1.EnterprisePortalCodyService/GetCodyGatewayAccess"
)

// EnterprisePortalCodyServiceClient is the client API for EnterprisePortalCodyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnterprisePortalCodyServiceClient interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	// Properties may be inferred from the active license, or be defined in
	// overrides.
	GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*GetCodyGatewayAccessResponse, error)
}

type enterprisePortalCodyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnterprisePortalCodyServiceClient(cc grpc.ClientConnInterface) EnterprisePortalCodyServiceClient {
	return &enterprisePortalCodyServiceClient{cc}
}

func (c *enterprisePortalCodyServiceClient) GetCodyGatewayAccess(ctx context.Context, in *GetCodyGatewayAccessRequest, opts ...grpc.CallOption) (*GetCodyGatewayAccessResponse, error) {
	out := new(GetCodyGatewayAccessResponse)
	err := c.cc.Invoke(ctx, EnterprisePortalCodyService_GetCodyGatewayAccess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnterprisePortalCodyServiceServer is the server API for EnterprisePortalCodyService service.
// All implementations must embed UnimplementedEnterprisePortalCodyServiceServer
// for forward compatibility
type EnterprisePortalCodyServiceServer interface {
	// Retrieve Cody Gateway access granted to an Enterprise subscription.
	// Properties may be inferred from the active license, or be defined in
	// overrides.
	GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*GetCodyGatewayAccessResponse, error)
	mustEmbedUnimplementedEnterprisePortalCodyServiceServer()
}

// UnimplementedEnterprisePortalCodyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEnterprisePortalCodyServiceServer struct {
}

func (UnimplementedEnterprisePortalCodyServiceServer) GetCodyGatewayAccess(context.Context, *GetCodyGatewayAccessRequest) (*GetCodyGatewayAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodyGatewayAccess not implemented")
}
func (UnimplementedEnterprisePortalCodyServiceServer) mustEmbedUnimplementedEnterprisePortalCodyServiceServer() {
}

// UnsafeEnterprisePortalCodyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnterprisePortalCodyServiceServer will
// result in compilation errors.
type UnsafeEnterprisePortalCodyServiceServer interface {
	mustEmbedUnimplementedEnterprisePortalCodyServiceServer()
}

func RegisterEnterprisePortalCodyServiceServer(s grpc.ServiceRegistrar, srv EnterprisePortalCodyServiceServer) {
	s.RegisterService(&EnterprisePortalCodyService_ServiceDesc, srv)
}

func _EnterprisePortalCodyService_GetCodyGatewayAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodyGatewayAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnterprisePortalCodyServiceServer).GetCodyGatewayAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnterprisePortalCodyService_GetCodyGatewayAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnterprisePortalCodyServiceServer).GetCodyGatewayAccess(ctx, req.(*GetCodyGatewayAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnterprisePortalCodyService_ServiceDesc is the grpc.ServiceDesc for EnterprisePortalCodyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnterprisePortalCodyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sourcegraph.enterpriseportal.cody.v1.EnterprisePortalCodyService",
	HandlerType: (*EnterprisePortalCodyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCodyGatewayAccess",
			Handler:    _EnterprisePortalCodyService_GetCodyGatewayAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cody.proto",
}
